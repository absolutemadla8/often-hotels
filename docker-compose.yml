version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: often-hotels-api
    ports:
      - "8000:8000"
    environment:
      # Database - using Docker PostgreSQL container
      - DATABASE_URL=postgres://postgres:password@db:5432/often_hotels
      # Redis - using Docker Redis container  
      - REDIS_URL=redis://redis:6379/0
      # Security
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      # SerpAPI
      - SERP_API_KEY=${SERP_API_KEY:-your-serp-api-key-here}
      # TravClan API
      - TRAVCLAN_API_KEY=${TRAVCLAN_API_KEY:-your-travclan-api-key-here}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - app-network
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    container_name: often-hotels-db
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=often_hotels
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d often_hotels"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: often-hotels-redis
    ports:
      - "6380:6379"
    command: redis-server --appendonly yes --requirepass ""
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx, Prometheus, and Grafana are commented out for simpler setup
  # Uncomment these services if you need monitoring and reverse proxy
  
  # nginx:
  #   image: nginx:alpine
  #   container_name: often-hotels-nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./nginx/ssl:/etc/nginx/ssl:ro
  #   depends_on:
  #     - app
  #   networks:
  #     - app-network
  #   restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge